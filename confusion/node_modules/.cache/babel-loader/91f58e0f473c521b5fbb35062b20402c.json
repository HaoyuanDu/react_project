{"ast":null,"code":"import * as ActionTypes from './ActionType';\nimport { baseUrl } from '../shared/bseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComments = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  console.log('json object', JSON.stringify(newComment));\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    header: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => // newComment.id = response.id;\n  // newComment = newComment.json();\n  // console.log('inside action creaort', response, newComment);\n  dispatch(addComment(newComment))).catch(error => {\n    console.log('Post comments', error.message);\n    alert('Your comment could not be posted\\n error: ', error.message);\n  });\n};\nexport const postFeedback = feedback => dispatch => {\n  const newFeedback = Object.assign({\n    date: new Date().toISOString()\n  }, feedback);\n  return fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: JSON.stringify(newFeedback),\n    header: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => {\n    // console.log('inside action creator : ' + newFeedback);\n    // console.log('feedback form ', InitialFeedback);\n    // dispatch(addFeedback(newFeedback));\n    newFeedback.id = response.id; // console.log(JSON.stringify(newFeedback));\n\n    alert('Thank you for your feedback \\n' + JSON.stringify(newFeedback));\n  }).catch(error => {\n    console.log('Post feedback: ', error.message);\n    alert('Your comment could not be posted\\n error: ', error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["M:/study3/full stack/react_project/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComments","dishId","rating","author","dispatch","newComment","date","Date","toISOString","console","log","JSON","stringify","fetch","method","body","header","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","alert","postFeedback","feedback","newFeedback","Object","assign","id","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","LEADERS_LOADING","leadersFailed","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionType';\r\nimport { baseUrl } from '../shared/bseUrl';\r\nexport const addComment = (comment) => ({\r\n  type: ActionTypes.ADD_COMMENT,\r\n  payload: comment,\r\n});\r\nexport const postComments = (dishId, rating, author, comment) => (dispatch) => {\r\n  const newComment = {\r\n    dishId: dishId,\r\n    rating: rating,\r\n    author: author,\r\n    comment: comment,\r\n  };\r\n  newComment.date = new Date().toISOString();\r\n\r\n  console.log('json object', JSON.stringify(newComment));\r\n  return fetch(baseUrl + 'comments', {\r\n    method: 'POST',\r\n    body: JSON.stringify(newComment),\r\n    header: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    credentials: 'same-origin',\r\n  })\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            'Error ' + response.status + ': ' + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((response) =>\r\n      // newComment.id = response.id;\r\n      // newComment = newComment.json();\r\n      // console.log('inside action creaort', response, newComment);\r\n      dispatch(addComment(newComment))\r\n    )\r\n    .catch((error) => {\r\n      console.log('Post comments', error.message);\r\n      alert('Your comment could not be posted\\n error: ', error.message);\r\n    });\r\n};\r\n\r\nexport const postFeedback = (feedback) => (dispatch) => {\r\n  const newFeedback = Object.assign(\r\n    { date: new Date().toISOString() },\r\n    feedback\r\n  );\r\n\r\n  return fetch(baseUrl + 'feedback', {\r\n    method: 'POST',\r\n    body: JSON.stringify(newFeedback),\r\n    header: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    credentials: 'same-origin',\r\n  })\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            'Error ' + response.status + ': ' + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((response) => {\r\n      // console.log('inside action creator : ' + newFeedback);\r\n      // console.log('feedback form ', InitialFeedback);\r\n      // dispatch(addFeedback(newFeedback));\r\n      newFeedback.id = response.id;\r\n      // console.log(JSON.stringify(newFeedback));\r\n      alert('Thank you for your feedback \\n' + JSON.stringify(newFeedback));\r\n    })\r\n    .catch((error) => {\r\n      console.log('Post feedback: ', error.message);\r\n      alert('Your comment could not be posted\\n error: ', error.message);\r\n    });\r\n};\r\nexport const fetchDishes = () => (dispatch) => {\r\n  dispatch(dishesLoading(true));\r\n  return fetch(baseUrl + 'dishes')\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            'Error ' + response.status + ': ' + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((dishes) => dispatch(addDishes(dishes)))\r\n    .catch((error) => dispatch(dishesFailed(error.message)));\r\n};\r\nexport const dishesLoading = () => ({\r\n  type: ActionTypes.DISHES_LOADING,\r\n});\r\nexport const dishesFailed = (errmess) => ({\r\n  type: ActionTypes.DISHES_FAILED,\r\n  payload: errmess,\r\n});\r\nexport const addDishes = (dishes) => ({\r\n  type: ActionTypes.ADD_DISHES,\r\n  payload: dishes,\r\n});\r\nexport const fetchComments = () => (dispatch) => {\r\n  return fetch(baseUrl + 'comments')\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            'Error ' + response.status + ': ' + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((comments) => dispatch(addComments(comments)))\r\n    .catch((error) => dispatch(commentsFailed(error.message)));\r\n};\r\nexport const commentsFailed = (errmess) => ({\r\n  type: ActionTypes.COMMENTS_FAILED,\r\n  payload: errmess,\r\n});\r\nexport const addComments = (comments) => ({\r\n  type: ActionTypes.ADD_COMMENTS,\r\n  payload: comments,\r\n});\r\nexport const fetchPromos = () => (dispatch) => {\r\n  dispatch(promosLoading(true));\r\n  return fetch(baseUrl + 'promotions')\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            'Error ' + response.status + ': ' + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((promos) => dispatch(addPromos(promos)))\r\n    .catch((error) => dispatch(promosFailed(error.message)));\r\n};\r\nexport const promosLoading = () => ({\r\n  type: ActionTypes.PROMOS_LOADING,\r\n});\r\nexport const promosFailed = (errmess) => ({\r\n  type: ActionTypes.PROMOS_FAILED,\r\n  payload: errmess,\r\n});\r\nexport const addPromos = (promos) => ({\r\n  type: ActionTypes.ADD_PROMOS,\r\n  payload: promos,\r\n});\r\n\r\nexport const fetchLeaders = () => (dispatch) => {\r\n  dispatch(leadersLoading(true));\r\n  return fetch(baseUrl + 'leaders')\r\n    .then(\r\n      (response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            'Error ' + response.status + ': ' + response.statusText\r\n          );\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      (error) => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then((response) => response.json())\r\n    .then((leaders) => dispatch(addLeaders(leaders)))\r\n    .catch((error) => dispatch(dishesFailed(error.message)));\r\n};\r\n\r\nexport const leadersLoading = () => ({\r\n  type: ActionTypes.LEADERS_LOADING,\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n  type: ActionTypes.LEADERS_FAILED,\r\n  payload: errmess,\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n  type: ActionTypes.ADD_LEADERS,\r\n  payload: leaders,\r\n});"]},"metadata":{},"sourceType":"module"}